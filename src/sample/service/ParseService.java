package service;

import model.Answers;
import model.TestQuestion;
import model.Variant;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ParseService {
    private ParseService() {
    }

    public static List<TestQuestion> parse() {
        List<TestQuestion> questions = new ArrayList<>(Arrays.asList(
                new TestQuestion("Минимальное Хэммингово расстояние (кодовое расстояние) dmin  - это наименьшее расстояние по Хэммингу между..\n" +
                        "•\tразличными парами разрешенных кодовых комбинаций.\n" +
                        "•\tнулевой и остальными кодовыми комбинациями.\n" +
                        "•\tразрешенными и запрещенными кодовыми комбинациями.\n" +
                        "•\tнулевой и запрещенными кодовыми комбинациями.")
                ,
                new TestQuestion("Чему равно число разрешенных КК двоичного (15,7) кода?\n" +
                        "•\t128.\n" +
                        "•\t255.\n" +
                        "•\t256.\n" +
                        "•\t127."),
                new TestQuestion("Чему равно число запрещенных КК для блочного кода (7,3)?\n" +
                        "•\t120.\n" +
                        "•\t64.\n" +
                        "•\t32.\n" +
                        "•\t8."),
                new TestQuestion("Чему равна исправляющая способность двоичного кода, если dmin=8?\n" +
                        "•\t3.\n" +
                        "•\t2.\n" +
                        "•\t4.\n" +
                        "•\t1."),
                new TestQuestion("Чему равна обнаруживающая способность кода с dmin=10 в комбинированном режиме, если он исправляет двойные ошибки?\n" +
                        "•\t7.\n" +
                        "•\t6.\n" +
                        "•\t5.\n" +
                        "•\t4."),
                new TestQuestion("Выражение для энергетического выигрыша от кодирования (n,k)-кодом.\n" +
                        "•\tW = 10lg (h^2)онк - 10lg (h^2)ок - 10lg (n/k).\n" +
                        "•\tW = 10lg (h^2)ок - 10lg (h^2)онк - 10lg (n/k).\n" +
                        "•\tW = 10lg (h^2)онк - 10lg (h^2)ок - 10lg (k/n).\n" +
                        "•\tW = 10lg (h^2)ок - 10lg (h^2)онк - 10lg (k/n)."),
                new TestQuestion("Код называется циклическим если при циклическом сдвиге разрешенной КК..\n" +
                        "•\tтакже получаются РКК данного кода.\n" +
                        "•\tполучаются все возможные РКК данного кода.\n" +
                        "•\tполучаются все линейно независимые РКК данного кода.\n" +
                        "•\tполучаются все ненулевые РКК данного кода."),
                new TestQuestion("Какой (n,k)-код называется систематическим кодом?\n" +
                        "•\tЕсли информационные символы стоят на первых k позициях.\n" +
                        "•\tЕсли информационные символы стоят на первых r позициях.\n" +
                        "•\tЕсли информационные и проверочные символы невозможно отделить друг от друга.\n" +
                        "•\tЕсли проверочные символы стоят на первых k позициях."),
                new TestQuestion("Каким из перечисленных свойств обладает образующая матрица G группового кода?\n" +
                        "•\tСтроки матрицы G являются линейно-независимыми.\n" +
                        "•\tСтолбцы матрицы G являются линейно-независимыми.\n" +
                        "•\tРазмерность матрицы G равна [k*r].\n" +
                        "•\tСтолбцы матрицы G образуют разрешенные КК."),
                new TestQuestion("Каким из перечисленных свойств обладает проверочная матрица H группового кода?\n" +
                        "•\tМатрица H имеет r строк и n столбцов.\n" +
                        "•\tПроизведение разрешенной КК на матрицу H равно 0.\n" +
                        "•\tРазмерность матрицы H равна [k*n].\n" +
                        "•\tСтолбцы и строки матрицы H являются линейно-независимыми.")
                ,
                new TestQuestion("Чему равна размерность единичной матрицы, входящей в состав образующей матрицы систематического вида для кода (15,7)?\n" +
                        "•\t(7*7).\n" +
                        "•\t(8*8).\n" +
                        "•\t(15*15).\n" +
                        "•\t(7*8)."),
                new TestQuestion("Чему равна размерность единичной матрицы, входящей в состав проверочной матрицы систематического вида для кода (15,7)?\n" +
                        "•\t(8*8).\n" +
                        "•\t(7*7).\n" +
                        "•\t(8*7).\n" +
                        "•\t(7*8)."),
                new TestQuestion("Сколько строк содержит проверочная матрица кода (15,8)?\n" +
                        "•\t7.\n" +
                        "•\t8.\n" +
                        "•\t15.\n" +
                        "•\t10."),
                new TestQuestion("Понятие \"синдром\" в теории помехоустойчивого кодирования - это скалярное произведение.. (принятой - разрешенной F или запрещенной Fρ)\n" + "•\tпринятой КК на транспонированную проверочную матрицу H^т.\n" +
                        "•\tпринятой КК на проверочную матрицу H.\n" +
                        "•\tпринятой КК на транспонированную образующую матрицу G^т.\n" +
                        "•\tтранспонированной проверочной матрицы H^т на принятую комбинацию."),
                new TestQuestion("При каком условии циклический код исправляет ошибки кратности tи? Для исправления ошибок кратности tи необходимо и достаточно, чтобы..\n" +
                        "•\tобразующий полином имел 2tи последовательных корней.\n" +
                        "•\tпроверочный полином имел 2tи последовательных корней.\n" +
                        "•\tобразующий полином имел 2tи-1 последовательных корней.\n" +
                        "•\tпроверочный полином имел 2tи-1 последовательных корней."),
                new TestQuestion("Первая строка матрицы Hc двоичного (7,4)-кода Хэмминга имеет вид 1011100. Записать уравнение для первого проверочного символа.\n" +
                        "•\tС4 = С0+С2+С3.\n" +
                        "•\tС4 = С0+С1+С2.\n" +
                        "•\tС4 = С1+С2+С3.\n" +
                        "•\tС4 = С0+С1+С3."),
                new TestQuestion("Чему равно число ячеек регистра сдвига при кодировании методом умножения на образующий полином циклического (15,5) кода?\n" +
                        "•\t10.\n" +
                        "•\t15.\n" +
                        "•\t5.\n" +
                        "•\t8."),
                new TestQuestion("В какой матрице строка соответствует разрешенной кодовой комбинации?\n" +
                        "•\tВ образующей матрице.\n" +
                        "•\tВ проверочной матрице.\n" +
                        "•\tВ транспонированной образующей матрице.\n" +
                        "•\tВ транспонированной проверочной матрице."),
                new TestQuestion("Сколько ненулевых синдромов может быть в двоичном циклическом (15,7) коде?\n" +
                        "•\t255.\n" +
                        "•\t127.\n" +
                        "•\t8.\n" +
                        "•\t7."),
                new TestQuestion("В циклическом коде значности n = 15 число разрешенных КК равно 128. Чему равна степень образующего полинома?\n" +
                        "•\t8.\n" +
                        "•\t7.\n" +
                        "•\t6.\n" +
                        "•\t5."),
                new TestQuestion("Выражение для образующего полинома g(x) примитивного кода БЧХ над полем GF(2^s), с длиной n = 2^s–1 и исправляющего t ошибок (корни g(x) - a^1, a^2,…,a^2t, где a – примитивный элемент расширенного поля GF(p^s)).\n" +
                        "•\tg(x) = НОК[m1(x), m2(x),…, m2t(x)], где mi(x) – минимальный полином для элемента а^i.\n" +
                        "•\tg(x) = НОК[m1(x), m2(x),…, mt(x)], где mi(x) – минимальный полином для элемента а^i.\n" +
                        "•\tg(x) = НОК[m1(x), m2(x),…, m(2t-2)(x)], где mi(x) – минимальный полином для элемента а^i.\n" +
                        "•\tg(x) = НОК[m0(x), m1(x),…, m(2t-1)(x)], где mi(x) – минимальный полином для элемента а^i."),
                new TestQuestion("Дан образующий полином g(x)=x^4+a^3 x^3+x^2+ax+a^3 кода РС (7,3) над полем GF(2^3). Чему равен свободный коэффициент в сопряженном полиноме?\n" +
                        "•\ta^4.\n" +
                        "•\ta^3.\n" +
                        "•\t1.\n" +
                        "•\ta."),
                new TestQuestion("Чему равно минимальное кодовое расстояние для кода Рида-Соломона?\n" +
                        "•\tdmin = r+1.\n" +
                        "•\tdmin = k+1.\n" +
                        "•\tdmin = r-1.\n" +
                        "•\tdmin = k-1."),
                new TestQuestion("Чему равна степень образующего полинома кода Рида-Соломона, исправляющего тройные ошибки?\n" +
                        "•\t6.\n" +
                        "•\t9.\n" +
                        "•\t3.\n" +
                        "•\t12."),
                new TestQuestion("Чему равна исправляющая способность кода Рида-Соломона, образующий полином которого имеет степень 8?\n" +
                        "•\t4.\n" +
                        "•\t8.\n" +
                        "•\t6.\n" +
                        "•\t2."),
                new TestQuestion("Образующий полином РС-кода равен g(x)=x^r+gr–1x^(r–1)+...+g1x+g0, где gi \uF0CE GF(p^s). Определить выражение для сопряженного полинома.\n" +
                        "•\tg*(x) = x^r g0^(-1) g(x^(-1)).\n" +
                        "•\tg*(x) = x^r g0 g(x^(-1)).\n" +
                        "•\tg*(x) = x^r g0^(-1) g(x^(-i)).\n" +
                        "•\tg*(x) = x^k g0^(-1) g(x^(-1))."),
                new TestQuestion("С какой строки начинается проверочная матрица (7,3) РС-кода с образующим полиномом g(x)=(x–a^3) (x–a^4) (x–a^5) (x–a^6)?\n" +
                        "•\ta^0 a^3 a^6 a^2 a^5 a^1 a^4.\n" +
                        "•\ta^0 a^3 a^4 a^5 a^6 a^1 a^2.\n" +
                        "•\ta^0 a^1 a^2 a^3 a^4 a^5 a^6.\n" +
                        "•\ta^0 a^3 a^2 a^1 a^6 a^5 a^4."),
                new TestQuestion("Чему равно число компонент синдрома для кода РС (15, 7)?\n" +
                        "•\t8.\n" +
                        "•\t7.\n" +
                        "•\t128.\n" +
                        "•\t256."),
                new TestQuestion("Чему равно число ненулевых синдромов для кода РС (15, 7)?\n" +
                        "•\t2^32 -1.\n" +
                        "•\t2^8 -1\n" +
                        "•\t2^15 -1\n" +
                        "•\t2^28 -1"),
                new TestQuestion("Определить вторую строку (начиная с нулевой) матрицы ФМС-преобразования для поля GF(2^3)\n" +
                        "•\ta^0 a^2 a^4 a^6 a^1 a^3 a^5.\n" +
                        "•\ta^0 a^1 a^2 a^3 a^4 a^5 a^6.\n" +
                        "•\ta^0 a^2 a^4 a^6 a^2 a^4 a^6.\n" +
                        "•\ta^0 a^2 a^4 a^8 a^1 a^3 a^5."),
                new TestQuestion("Определить выражение для ключевого уравнения, связывающего синдромный полином S(x), полином локаторов ошибок Q(x) и полином величин ошибок w(х).\n" +
                        "•\tS(x)Q(x) = w (x)mod x^r.\n" +
                        "•\tS(x)w(x) = Q(x)mod x^r.\n" +
                        "•\tS(x)Q(x) = w(x)mod x^k.\n" +
                        "•\tS(x)w(x) = Q(x)mod x^k."),
                new TestQuestion("Чему равна максимальная степень полинома локаторов ошибок для кода РС (15, 5)?\n" +
                        "•\t5.\n" +
                        "•\t4.\n" +
                        "•\t6.\n" +
                        "•\t3."),
                new TestQuestion("Задан код РС (15, 7). На каких позициях произошли ошибки, если корнями полинома локаторов ошибок являются элементы b^5, b^0, b^7, b^2?\n" +
                        "•\t10, 0, 8, 13.\n" +
                        "•\t5, 0, 7, 2.\n" +
                        "•\t10, 0, 7, 2.\n" +
                        "•\t2, 7, 5, 0."),
                new TestQuestion("Определить производную по x по mod 2 для полинома A(x)=a^4 x^8+a^3 x^6+ax^5+a^2 x^4+a^3 x^2+a^6.\n" +
                        "•\tax^4.\n" +
                        "•\tax.\n" +
                        "•\ta^3*x^4.\n" +
                        "•\ta^3*x."),
                new TestQuestion("Чему равна максимальная степень полинома локаторов ошибок для кода РС (15, 7)?\n" +
                        "•\t4.\n" +
                        "•\t7.\n" +
                        "•\t8.\n" +
                        "•\t2."),
                new TestQuestion("Чему равна максимальная степень полинома величин ошибок для кода РС (15, 7)?\n" +
                        "•\t3.\n" +
                        "•\t4.\n" +
                        "•\t7.\n" +
                        "•\t2."),
                new TestQuestion("Задан код РС (15, 7). Чему равно число различных ненулевых синдромов?\n" +
                        "•\t(2^4)^8 -1 = 2^32-1.\n" +
                        "•\t(2^7)^8 -1 = 2^56-1.\n" +
                        "•\t(2^4)^7 -1 = 2^28-1.\n" +
                        "•\t(2^4)^15 -1 = 2^60-1."),
                new TestQuestion("Чему равно число элементов, отличных от единицы, в матрице ФМС-преобразования над полем GF(2^4)?\n" +
                        "•\t196.\n" +
                        "•\t128.\n" +
                        "•\t256.\n" +
                        "•\t64.")
        ));
        return questions;
    }

    public static List<Variant> getVariants() {
        List<Variant> list = new ArrayList<>(Arrays.asList(
                new Variant("1 0 2 1101 665 0000420 4036434"),
                new Variant("2 0 3 1101 036 0010006 1403336"),
                new Variant("3 0 4 1101 627 0007400 0570215"),
                new Variant("4 0 5 1101 607 0002400 4214644"),
                new Variant("5 0 6 1101 246 0300020 5066452"),
                new Variant("10 2 4 1101 715 0000011 5023272"),
                new Variant("13 3 5 1101 321 2000050 2065614"),
                new Variant("16 3 3 1101 511 0300200 7006157"),
                new Variant("19 4 6 1101 327 4000050 4160665"),
                new Variant("22 5 2 1101 760 0005070 4213762"),
                new Variant("25 6 5 1101 323 0050010 4416041"),
                new Variant("28 0 3 1011 231 0450000 2610410"),
                new Variant("31 1 6 1011 543 4005000 3505750"),
                new Variant("34 2 2 1011 460 2007000 3467201"),
                new Variant("37 3 5 1011 740 5000400 7044554"),
                new Variant("40 4 1 1011 041 0064000 5252444")
        ));

        return list;
    }


    public static List<Answers> getListAnswers() {
        List<Answers> answers = new ArrayList<>(Arrays.asList(
                new Answers("1\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 100 110 101 010 011 111\n" +
                        "0 4 7 2 6 5 3 4 0 5 1 3 7 6 7 5 0 6 2 4 1 2 1 6 0 7 3 5 6 3 2 7 0 1 4 5 7 4 3 1 0 2 3 6 1 5 4 2 0\n" +
                        "76631\n" +
                        "1 1 1 1 1 1 1 1 2 3 4 5 6 7 1 3 5 7 2 4 6 1 4 7 3 6 2 5\n" +
                        "5745225\n" +
                        "5745105\n" +
                        "3440 4036434\n" +
                        "166\n" +
                        "32\n" +
                        "1 1 7 3 7 0 0 3\n" +
                        "2 3\n" +
                        "5 2\n" +
                        "0052000 4027434\n" +
                        "544"),
                new Answers("2\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 011 101 100 111 010 110\n" +
                        "0 6 4 3 7 2 5 6 0 7 5 4 1 3 4 7 0 1 6 5 2 3 5 1 0 2 7 6 7 4 6 2 0 3 1 2 1 5 7 3 0 4 5 3 2 6 1 4 0\n" +
                        "75221\n" +
                        "1 1 1 1 1 1 1 1 2 3 4 5 6 7 1 3 5 7 2 4 6 1 4 7 3 6 2 5\n" +
                        "0211626\n" +
                        "0201620\n" +
                        "6460 1403336\n" +
                        "146\n" +
                        "65\n" +
                        "1 5 5 7 0 7 1 0\n" +
                        "1 4\n" +
                        "5 3\n" +
                        "0500300 1203036\n" +
                        "226"),
                new Answers("3\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 110 010 111 100 101 011\n" +
                        "0 4 7 2 6 5 3 4 0 5 1 3 7 6 7 5 0 6 2 4 1 2 1 6 0 7 3 5 6 3 2 7 0 1 4 5 7 4 3 1 0 2 3 6 1 5 4 2 0\n" +
                        "76631\n" +
                        "1 1 1 1 1 1 1 1 2 3 4 5 6 7 1 3 5 7 2 4 6 1 4 7 3 6 2 5\n" +
                        "5212207\n" +
                        "5216107\n" +
                        "5574 0570215\n" +
                        "125\n" +
                        "51\n" +
                        "1 7 0 0 3 1 7 3\n" +
                        "5 6\n" +
                        "6 1\n" +
                        "0000061 0570256\n" +
                        "066"),
                new Answers("4\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 111 011 010 101 110 100\n" +
                        "0 6 4 3 7 2 5 6 0 7 5 4 1 3 4 7 0 1 6 5 2 3 5 1 0 2 7 6 7 4 6 2 0 3 1 2 1 5 7 3 0 4 5 3 2 6 1 4 0\n" +
                        "75221\n" +
                        "1 1 1 1 1 1 1 1 2 3 4 5 6 7 1 3 5 7 2 4 6 1 4 7 3 6 2 5\n" +
                        "5346217\n" +
                        "5341517\n" +
                        "0113 4214644\n" +
                        "114\n" +
                        "01\n" +
                        "1 4 0 3 0 1 3 4\n" +
                        "4 6\n" +
                        "1 1\n" +
                        "0000101 4214243\n" +
                        "503"),
                new Answers("5\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 101 111 110 011 100 010\n" +
                        "0 6 4 3 7 2 5 6 0 7 5 4 1 3 4 7 0 1 6 5 2 3 5 1 0 2 7 6 7 4 6 2 0 3 1 2 1 5 7 3 0 4 5 3 2 6 1 4 0\n" +
                        "75221\n" +
                        "1 1 1 1 1 1 1 1 2 3 4 5 6 7 1 3 5 7 2 4 6 1 4 7 3 6 2 5\n" +
                        "1525666\n" +
                        "1625616\n" +
                        "5036 5066452\n" +
                        "146\n" +
                        "51\n" +
                        "1 5 5 7 0 7 1 0\n" +
                        "1 4\n" +
                        "6 3\n" +
                        "0600300 5666152\n" +
                        "662"),
                new Answers("10\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 110 010 111 100 101 011\n" +
                        "0 4 7 2 6 5 3 4 0 5 1 3 7 6 7 5 0 6 2 4 1 2 1 6 0 7 3 5 6 3 2 7 0 1 4 5 7 4 3 1 0 2 3 6 1 5 4 2 0\n" +
                        "15351\n" +
                        "1 3 5 7 2 4 6 1 4 7 3 6 2 5 1 5 2 6 3 7 4 1 6 4 2 7 5 3\n" +
                        "7227545\n" +
                        "7227526\n" +
                        "5212 5023272\n" +
                        "166\n" +
                        "55\n" +
                        "1 1 7 3 7 0 0 3\n" +
                        "2 3\n" +
                        "2 2\n" +
                        "0022000 5005272\n" +
                        "522"),
                new Answers("13\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 111 011 010 101 110 100\n" +
                        "0 6 4 3 7 2 5 6 0 7 5 4 1 3 4 7 0 1 6 5 2 3 5 1 0 2 7 6 7 4 6 2 0 3 1 2 1 5 7 3 0 4 5 3 2 6 1 4 0\n" +
                        "57151\n" +
                        "1 4 7 3 6 2 5 1 5 2 6 3 7 4 1 6 4 2 7 5 3 1 7 6 5 4 3 2\n" +
                        "7122741\n" +
                        "3122721\n" +
                        "4103 2065614\n" +
                        "163\n" +
                        "46\n" +
                        "1 7 0 7 1 0 5 5\n" +
                        "3 6\n" +
                        "4 3\n" +
                        "0004003 2062611\n" +
                        "571"),
                new Answers("16\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 011 101 100 111 010 110\n" +
                        "0 6 4 3 7 2 5 6 0 7 5 4 1 3 4 7 0 1 6 5 2 3 5 1 0 2 7 6 7 4 6 2 0 3 1 2 1 5 7 3 0 4 5 3 2 6 1 4 0\n" +
                        "57151\n" +
                        "1 4 7 3 6 2 5 1 5 2 6 3 7 4 1 6 4 2 7 5 3 1 7 6 5 4 3 2\n" +
                        "2274171\n" +
                        "2774671\n" +
                        "2770 7006157\n" +
                        "155\n" +
                        "24\n" +
                        "1 1 3 4 4 0 3 0\n" +
                        "1 3\n" +
                        "1 3\n" +
                        "0103000 7105157\n" +
                        "327"),
                new Answers("19\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 101 111 110 011 100 010\n" +
                        "0 6 4 3 7 2 5 6 0 7 5 4 1 3 4 7 0 1 6 5 2 3 5 1 0 2 7 6 7 4 6 2 0 3 1 2 1 5 7 3 0 4 5 3 2 6 1 4 0\n" +
                        "23361\n" +
                        "1 5 2 6 3 7 4 1 6 4 2 7 5 3 1 7 6 5 4 3 2 1 1 1 1 1 1 1\n" +
                        "4667047\n" +
                        "0667027\n" +
                        "6170 4160665\n" +
                        "117\n" +
                        "62\n" +
                        "1 7 1 0 5 5 7 0\n" +
                        "1 5\n" +
                        "6 6\n" +
                        "060060 4260605\n" +
                        "335"),
                new Answers("22\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 100 110 101 010 011 111\n" +
                        "0 4 7 2 6 5 3 4 0 5 1 3 7 6 7 5 0 6 2 4 1 2 1 6 0 7 3 5 6 3 2 7 0 1 4 5 7 4 3 1 0 2 3 6 1 5 4 2 0\n" +
                        "67211\n" +
                        "1 6 4 2 7 5 3 1 7 6 5 4 3 2 1 1 1 1 1 1 1 1 2 3 4 5 6 7\n" +
                        "5360260\n" +
                        "5365220\n" +
                        "5137 4213762\n" +
                        "142\n" +
                        "50\n" +
                        "1 0 3 1 7 3 7 0\n" +
                        "0 1\n" +
                        "2 5\n" +
                        "2500000 1313762\n" +
                        "372"),
                new Answers("25\n" +
                        "001 010 100 011 110 111 101\n" +
                        "001 111 011 010 101 110 100\n" +
                        "0 6 4 3 7 2 5 6 0 7 5 4 1 3 4 7 0 1 6 5 2 3 5 1 0 2 7 6 7 4 6 2 0 3 1 2 1 5 7 3 0 4 5 3 2 6 1 4 0\n" +
                        "32711\n" +
                        "1 7 6 5 4 3 2 1 1 1 1 1 1 1 1 2 3 4 5 6 7 1 3 5 7 2 4 6\n" +
                        "5010373\n" +
                        "5070353\n" +
                        "5706 4416041\n" +
                        "157\n" +
                        "53\n" +
                        "1 0 0 2 6 2 1 6\n" +
                        "0 6\n" +
                        "2 3\n" +
                        "2000003 5416044\n" +
                        "304"),
                new Answers("28\n" +
                        "001 010 100 101 111 011 110\n" +
                        "001 101 110 100 011 010 111\n" +
                        "0 4 7 2 6 5 3 4 0 5 1 3 7 6 7 5 0 6 2 4 1 2 1 6 0 7 3 5 6 3 2 7 0 1 4 5 7 4 3 1 0 2 3 6 1 5 4 2 0\n" +
                        "76631\n" +
                        "1 1 1 1 1 1 1 1 2 3 4 5 6 7 1 3 5 7 2 4 6 1 4 7 3 6 2 5\n" +
                        "1617401\n" +
                        "1367401\n" +
                        "5707 2610410\n" +
                        "161\n" +
                        "51\n" +
                        "1 6 0 5 5 6 1 0\n" +
                        "1 6\n" +
                        "7 4\n" +
                        "0700004 2210414\n" +
                        "354"),
                new Answers("31\n" +
                        "001 010 100 101 111 011 110\n" +
                        "001 110 011 111 101 100 010\n" +
                        "0 4 7 2 6 5 3 4 0 5 1 3 7 6 7 5 0 6 2 4 1 2 1 6 0 7 3 5 6 3 2 7 0 1 4 5 7 4 3 1 0 2 3 6 1 5 4 2 0\n" +
                        "42141\n" +
                        "1 2 3 4 5 6 7 1 3 5 7 2 4 6 1 4 7 3 6 2 5 1 5 2 6 3 7 4\n" +
                        "1261633\n" +
                        "2266633\n" +
                        "7214 3505750\n" +
                        "156\n" +
                        "71\n" +
                        "1 0 6 0 5 5 6 1\n" +
                        "0 5\n" +
                        "6 4\n" +
                        "6000040 4505770\n" +
                        "170"),
                new Answers("34\n" +
                        "001 010 100 101 111 011 110\n" +
                        "001 100 111 110 010 101 011\n" +
                        "0 6 4 3 7 2 5 6 0 7 5 4 1 3 4 7 0 1 6 5 2 3 5 1 0 2 7 6 7 4 6 2 0 3 1 2 1 5 7 3 0 4 5 3 2 6 1 4 0\n" +
                        "14641\n" +
                        "1 3 5 7 2 4 6 1 4 7 3 6 2 5 1 5 2 6 3 7 4 1 6 4 2 7 5 3\n" +
                        "4406560\n" +
                        "5404560\n" +
                        "5730 3467201\n" +
                        "162\n" +
                        "52\n" +
                        "1 0 2 6 2 1 6 0\n" +
                        "0 1\n" +
                        "6 1\n" +
                        "6100000 5367201\n" +
                        "541"),
                new Answers("37\n" +
                        "001 010 100 101 111 011 110\n" +
                        "001 011 101 010 110 111 100\n" +
                        "0 4 7 2 6 5 3 4 0 5 1 3 7 6 7 5 0 6 2 4 1 2 1 6 0 7 3 5 6 3 2 7 0 1 4 5 7 4 3 1 0 2 3 6 1 5 4 2 0\n" +
                        "51561\n" +
                        "1 4 7 3 6 2 5 1 5 2 6 3 7 4 1 6 4 2 7 5 3 1 7 6 5 4 3 2\n" +
                        "4306640\n" +
                        "7306340\n" +
                        "3203 7044554\n" +
                        "132\n" +
                        "33\n" +
                        "1 6 1 0 6 0 5 5\n" +
                        "3 5\n" +
                        "7 4\n" +
                        "0007040 7045574\n" +
                        "364"),
                new Answers("40\n" +
                        "001 010 100 101 111 011 110\n" +
                        "001 010 100 101 111 011 110\n" +
                        "0 6 4 3 7 2 5 6 0 7 5 4 1 3 4 7 0 1 6 5 2 3 5 1 0 2 7 6 7 4 6 2 0 3 1 2 1 5 7 3 0 4 5 3 2 6 1 4 0\n" +
                        "23361\n" +
                        "1 5 2 6 3 7 4 1 6 4 2 7 5 3 1 7 6 5 4 3 2 1 1 1 1 1 1 1\n" +
                        "0515771\n" +
                        "0522771\n" +
                        "0264 5252444\n" +
                        "157\n" +
                        "02\n" +
                        "1 0 0 2 6 2 1 6\n" +
                        "0 6\n" +
                        "5 2\n" +
                        "5000002 0252445\n" +
                        "015")
        ));
        return answers;
    }

}
